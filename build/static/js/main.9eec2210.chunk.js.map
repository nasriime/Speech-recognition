{"version":3,"sources":["Speech.js","App.js","serviceWorker.js","index.js"],"names":["recognition","window","SpeechRecognition","webkitSpeechRecognition","continous","interimResults","lang","Speech","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listening","toggleListen","bind","assertThisInitialized","handleListen","setState","console","log","start","onend","stop","onstart","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","transcriptArr","split","stopCmd","slice","finalText","join","onerror","error","react_default","a","createElement","style","container","id","button","onClick","interim","final","Component","display","flexDirection","alignItems","textAlign","width","height","background","borderRadius","margin","color","border","padding","App","className","src_Speech","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eec2210.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\n\r\n//------------------------SPEECH RECOGNITION-----------------------------\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\n\r\nrecognition.continous = true\r\nrecognition.interimResults = true\r\nrecognition.lang = 'en-US'\r\n\r\n\r\n//------------------------COMPONENT-----------------------------\r\n\r\nclass Speech extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      listening: false\r\n    }\r\n    this.toggleListen = this.toggleListen.bind(this)\r\n    this.handleListen = this.handleListen.bind(this)\r\n  }\r\n\r\n  toggleListen() {\r\n    this.setState({\r\n      listening: !this.state.listening\r\n    }, this.handleListen)\r\n  }\r\n\r\n  handleListen() {\r\n\r\n    console.log('listening?', this.state.listening)\r\n\r\n    if (this.state.listening) {\r\n      recognition.start()\r\n      recognition.onend = () => {\r\n        console.log(\"...continue listening...\")\r\n        recognition.start()\r\n      }\r\n\r\n    } else {\r\n      recognition.stop()\r\n      recognition.onend = () => {\r\n        console.log(\"Stopped listening per click\")\r\n      }\r\n    }\r\n\r\n    recognition.onstart = () => {\r\n      console.log(\"Listening!\")\r\n    }\r\n\r\n    let finalTranscript = ''\r\n    recognition.onresult = event => {\r\n      let interimTranscript = ''\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';\r\n        else interimTranscript += transcript;\r\n      }\r\n      document.getElementById('interim').innerHTML = interimTranscript\r\n      document.getElementById('final').innerHTML = finalTranscript\r\n\r\n    //-------------------------COMMANDS------------------------------------\r\n\r\n      const transcriptArr = finalTranscript.split(' ')\r\n      const stopCmd = transcriptArr.slice(-3, -1)\r\n      console.log('stopCmd', stopCmd)\r\n\r\n      if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening'){\r\n        recognition.stop()\r\n        recognition.onend = () => {\r\n          console.log('Stopped listening per command')\r\n          const finalText = transcriptArr.slice(0, -3).join(' ')\r\n          document.getElementById('final').innerHTML = finalText\r\n        }\r\n      }\r\n    }\r\n    \r\n  //-----------------------------------------------------------------------\r\n    \r\n    recognition.onerror = event => {\r\n      console.log(\"Error occurred in recognition: \" + event.error)\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={container}>\r\n        <button id='microphone-btn' style={button} onClick={this.toggleListen} />\r\n        <div id='interim' style={interim}></div>\r\n        <div id='final' style={final}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Speech\r\n\r\n\r\n//-------------------------CSS------------------------------------\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    textAlign: 'center'\r\n  },\r\n  button: {\r\n    width: '60px',\r\n    height: '60px',\r\n    background: 'lightblue',\r\n    borderRadius: '50%',\r\n    margin: '6em 0 2em 0'\r\n  },\r\n  interim: {\r\n    color: 'gray',\r\n    border: '#ccc 1px solid',\r\n    padding: '1em',\r\n    margin: '1em',\r\n    width: '300px'\r\n  },\r\n  final: {\r\n    color: 'black',\r\n    border: '#ccc 1px solid',\r\n    padding: '1em',\r\n    margin: '1em',\r\n    width: '300px'\r\n  }\r\n}\r\n\r\nconst { container, button, interim, final } = styles\r\n","import React, { Component } from 'react';\nimport Speech  from './Speech'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n        <Speech/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}